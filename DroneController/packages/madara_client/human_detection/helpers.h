/********************************************************************* 
* Usage of this software requires acceptance of the SMASH-CMU License,
* which can be found at the following URL:
*
* https://code.google.com/p/smash-cmu/wiki/License
*********************************************************************/


/**
 * @file    helpers.h
 * @author  Subhav Pradhan (subhav.m.pradhan@vanderbilt.edu)
 * 
 * This file includes definitions and declaration of global 
 * variables, structures and helper methods used by different 
 * human detection algorithms.
 **/

#include <drk.h>

/***********
 * DEFINES *
 ***********/ 
// Set sample size used by the basic algorithm to determine
// ambient temperature range.
#define MAX_SAMPLE_SIZE 20

// Set the max number of samples considered 
// in order to create a model in every iteration.
#define MAX_BUFFER_SIZE 5


/************ 
 * TYPEDEFS *
 ************/
// Struct to store user input parameters.
typedef struct
{
  char*   strategy;
  double  height;
  int     error_limit;
  double  human_temp_min;
  double  human_temp_max;
}input_param_struct;

// Struct to store temperature range. This struct is used to
// construct models used by sliding_window strategy.
typedef struct
{
  double min;
  double max;
}range;

// Typedef a pointer to a function responsible for human detection. Function pointer is used 
// to be able to implement strategy pattern.
typedef int (*human_detection_strategy) (input_param_struct* input_params, int result_map[][8]);

// Typedef a pointer to a function responsible for doing something when human is detected.
typedef void (*on_human_detected) (); 

/******************** 
 * GLOBAL VARIABLES *
 ********************/
// 2D array to store temperature reading from grideye.
double THERMAL_DATA[8][8];

// 2D array to store model used by sliding_window strategy. 
range RANGE_INFO[8][8];

// Variable to store frame number reading from grideye.
int FRAME_NUMBER;

// Variables to store ambient environment temperature.
double AMBIENT_TEMP_MIN, AMBIENT_TEMP_MAX;

// Define function pointer that will be used to call the
// function responsible to perform post human detection
// actions.
on_human_detected HUMAN_DETECTED_FPTR;

/******************** 
 * STATIC VARIABLES *
 ********************/
// Variable to keep track of previous frame number. This is used to make 
// sure detection algorithms do not use duplicate frames.
static int prev_frame_number = 0;

/********************** 
 * METHOD DEFINITIONS *
 **********************/
/**
 * Method that implements basic strategy.
 *
 * @param input_params  Pointer to structure that stores input params.
 * @param result_map    Integer array that will be filled by this method
 *                      with "1" in locations where humans were detected 
 *                      and "0" in location where there were no humans.   
 * @return              Number of pixels with human temperature. 
 **/
int  basic_strategy (input_param_struct* input_params, int result_map[][8]);

/**
 * Method that implements sliding window strategy.
 *
 * @param input_params  Pointer to structure that stores input params.
 * @param result_map    Integer array that will be filled by this method
 *                      with "1" in locations where humans were detected 
 *                      and "0" in location where there were no humans.
 * @return              Number of pixels with human temperature.   
 **/
int  sliding_window_strategy (input_param_struct* input_params, int result_map[][8]);

/**
 * Method that invokes drone-rk APIs to fly the drone.
 *
 * @param input_params  Pointer to structure that stores input params.  
 **/
void  flight_control (input_param_struct* input_params);

/**
 * Method that checks input parameter to determine which strategy to
 * use.
 *
 * @param input_params  Pointer to structure that stores input params.
 **/
void* select_strategy (void* input_params);

/**
 * Method to determine ambient temperature.
 *
 * @param input_params  Pointer to structure that stores input params.
 **/
void  set_ambient_temp (input_param_struct* input_params);

/**
 * Method that sets the HUMAN_DETECTED_FPTR function pointer to point 
 * to the function that implements post human detection action. 
 **/
void  set_on_human_detection ();

/**
 * Method that spins the drone. 
 **/
void  spin_drone ();

/**
 * Method that checks if a given temperature value is within the
 * human temperature range which is set by user as part of the set
 * of input parameters.
 *
 * @param input_params  Pointer to structure that stores input params.
 * @param temp          Temperature value that needs to be checked.
 * @return              1 if given temperature value falls in human
 *                      temperature range, 0 otherwise.              
 **/
int   detect_human (input_param_struct* input_params, double temp);

/**
 * Print thermal matrix.
 **/
void  print_matrix();

/**
 * Print thermal matrix with models generated by the sliding window
 * algorithm.
 **/
void print_matrix_model();

/**
 * Display help with information related to required input parameters.
 **/
void  display_help();

/**
 * Static inline function to grab thermal information from the
 * grideye buffer.
 **/
static inline void  grab_thermal_copy()
{
  while (FRAME_NUMBER <= prev_frame_number)
  {  
    sem_wait (serial_buf->semaphore);
    memcpy (&THERMAL_DATA, &((serial_buf->grideye_buf).temperature), sizeof(THERMAL_DATA));
    FRAME_NUMBER = serial_buf->grideye_buf.index;
    sem_post (serial_buf->semaphore);
  }
  prev_frame_number = FRAME_NUMBER;
}
