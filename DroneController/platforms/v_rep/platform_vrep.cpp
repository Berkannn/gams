/*********************************************************************
* Usage of this software requires acceptance of the SMASH-CMU License,
* which can be found at the following URL:
*
* https://code.google.com/p/smash-cmu/wiki/License
*********************************************************************/

#include "madara/knowledge_engine/Knowledge_Base.h"

// Platform-specific includes.
#include "platforms/platform.h"
#include "movement/platform_movement.h"
#include "sensors/platform_sensors.h"

// Includes for HW simulation through VRep.
#include "hw_simulator.h"
#include "transport_vrep.h"

#include "utilities/Position.h"
#include "utilities/string_utils.h"

#include <string>
#include <map>

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Overrides: init_platform().
////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool platform_init()
{
  // The actual initialization is postponed until the setup_knowledge_base function is called,
  // since only then the id is received.
  return true;
}

///////////////////////////////////////////////////////////////////////////////
// Overrides: setup_knowledge_base().
///////////////////////////////////////////////////////////////////////////////
std::vector<Madara::Transport::Base*> platform_get_transports(int id, 
  Madara::Knowledge_Engine::Knowledge_Base* kb)
{
  // Create the actual transport.
  Madara::Transport::Multicast_Transport* transport = 
    get_vrep_multicast_transport(id, kb);

  // Return the transport, only one.
  std::vector<Madara::Transport::Base*> transports;
  transports.push_back(transport);

  return transports;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Overrides: cleanup_platform().
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool platform_cleanup()
{
  return sim_cleanup();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Movement Functions.
////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool platform_init_control_functions()
{
  return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_takeoff()
{
  sim_platform_takeoff();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_land()
{
  sim_platform_land();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_up()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_down()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_left()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_right()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_forward()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_backward()
{

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_to_location(double lat, double lon, double alt)
{
  sim_platform_move_to_location(lat, lon, alt);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_move_to_altitude(double alt)
{
  sim_platform_move_to_altitude(alt);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool platform_location_reached()
{
  // TODO: implement this when there is a function for this in the VRep plugin. Currently not being used.
  return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool platform_altitude_reached()
{
  // TODO: implement this when there is a function for this in the VRep plugin. Currently not being used.
  return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_stop_movement()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool platform_init_sensor_functions()
{
  return sim_platform_init_sensor_functions();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The percentage of battery remaining.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
double platform_get_battery_remaining()
{
  // Because we are not running on batteries...
  return 100;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Loads information from the Madara thermal variables into the buffer given as a parameter.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_read_thermal(double buffer[8][8])
{
  sim_platform_read_thermal(buffer);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gets the GPS coordinates from the simulator and gives them back to the 
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void platform_read_gps(struct madara_gps * ret)
{
  // Get the values from the simulator.
  std::map<std::string, double> gpsInfo = sim_platform_read_gps();

  // Set the values in the return structure.
  ret->latitude = gpsInfo["latitude"];
  ret->longitude = gpsInfo["longitude"];
  ret->altitude = gpsInfo["altitude"];
  ret->num_sats = gpsInfo["num_sats"];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gets the altitude.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
double platform_get_altitude()
{
  return sim_platform_get_altitude();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gets the accuracy of the GPS for this platform, in meters.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
double platform_get_gps_accuracy()
{
  return sim_platform_get_gps_accuracy();
}
